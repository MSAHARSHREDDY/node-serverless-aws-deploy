service: user-service

useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  versionFunctions: false
  stage: dev
  region: us-east-1
  httpApi:
    cors: true
  environment:
    SNS_TOPIC: { Ref: CustomerTopic }
    STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY}
    STRIPE_PUBLISHABLE_KEY: ${env:STRIPE_PUBLISHABLE_KEY}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource:
        - !Ref CustomerTopic

custom:
  stage: "dev"
  serverless-offline:
    useChildProcesses: true # Very important for serverless-offline to work properly
    httpPort: 4000
    lambdaPort: 4002
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    target: node20
    platform: node
    concurrency: 10
    external: []  # If you need to exclude external libraries like aws-sdk, add it here.
    installExtraArgs: ["aws-sdk"]  # Install aws-sdk if needed.

functions:
  signup:
    handler: app/handlers/userHandler.Signup
    timeout: 30
    events:
      - httpApi:
          path: /signup
          method: post
  
  login:
    handler: app/handlers/userHandler.Login
    timeout: 30
    events:
      - httpApi:
          path: /login
          method: post
  
  verify:
    handler: app/handlers/userHandler.Verify
    timeout: 120
    events:
      - httpApi:
          path: /verify
          method: post
  
  get-verification-code:
    handler: app/handlers/userHandler.GetVerificationCode
    events:
      - httpApi:
          path: /verify
          method: get

  create-profile:
    handler: app/handlers/userHandler.CreateProfile
    events:
      - httpApi:
          path: /user
          method: post
  
  edit-profile:
    handler: app/handlers/userHandler.EditProfile
    events:
      - httpApi:
          path: /user
          method: put
  
  get-profile:
    handler: app/handlers/userHandler.GetProfile
    timeout: 30
    events:
      - httpApi:
          path: /user
          method: get
  
  # Cart section
  create-cart:
    handler: app/handlers/cartHandler.CreateCart
    timeout: 100
    events:
      - httpApi:
          path: /cart
          method: post
  
  edit-cart:
    handler: app/handlers/cartHandler.EditCart
    timeout: 100
    events:
      - httpApi:
          path: /cart/{id}
          method: put

  get-cart:
    handler: app/handlers/cartHandler.GetCart
    timeout: 100
    events:
      - httpApi:
          path: /cart
          method: get

  delete-cart:
    handler: app/handlers/cartHandler.DeleteCart
    timeout: 100
    events:
      - httpApi:
          path: /cart/{id}
          method: delete
  
  collect-payment:
    handler: app/handlers/orderHandler.CollectPayment
    timeout: 100
    esbuild: true
    events:
      - httpApi:
          path: /collect-payment
          method: post
  
  place-order:
    handler: app/handlers/orderHandler.PlaceOrder
    timeout: 30
    esbuild: true
    events:
      - httpApi:
          path: /order
          method: post

  joinSellerProgram:
    handler: app/handlers/sellerHandler.JoinSellerProgram
    timeout: 100
    events:
      - httpApi:
          path: /join
          method: post
  
  getPaymentMethod:
    handler: app/handlers/sellerHandler.GetPaymentMethods
    timeout: 100
    events:
      - httpApi:
          path: /payment-methods
          method: get

  editPaymentMethod:
    handler: app/handlers/sellerHandler.EditPaymentMethods
    timeout: 100
    events:
      - httpApi:
          path: /payment-methods/{id}
          method: put

plugins:
  - serverless-offline

package:
  individually: false

resources:
  Resources:
    CustomerTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "customer sns topic description"
        TopicName: CustomerTopic

  # Output for later usage
  Outputs:
    CustomerTopicInfo:
      Description: customer-topic
      Value: !Ref CustomerTopic
      Export:
        Name: customer-topic
